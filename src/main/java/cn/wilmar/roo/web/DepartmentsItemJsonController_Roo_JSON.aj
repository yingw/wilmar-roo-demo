// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.wilmar.roo.web;

import cn.wilmar.roo.domain.Department;
import cn.wilmar.roo.service.api.DepartmentService;
import cn.wilmar.roo.web.DepartmentsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect DepartmentsItemJsonController_Roo_JSON {
    
    declare @type: DepartmentsItemJsonController: @RestController;
    
    declare @type: DepartmentsItemJsonController: @RequestMapping(value = "/api/departments/{department}", name = "DepartmentsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param departmentService
     */
    @Autowired
    public DepartmentsItemJsonController.new(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Department
     */
    @ModelAttribute
    public Department DepartmentsItemJsonController.getDepartment(@PathVariable("department") Long id) {
        Department department = departmentService.findOne(id);
        if (department == null) {
            throw new NotFoundException(String.format("Department with identifier '%s' not found",id));
        }
        return department;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param department
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> DepartmentsItemJsonController.show(@ModelAttribute Department department) {
        return ResponseEntity.ok(department);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param department
     * @return UriComponents
     */
    public static UriComponents DepartmentsItemJsonController.showURI(Department department) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(DepartmentsItemJsonController.class).show(department))
            .buildAndExpand(department.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedDepartment
     * @param department
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> DepartmentsItemJsonController.update(@ModelAttribute Department storedDepartment, @Valid @RequestBody Department department, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        department.setId(storedDepartment.getId());
        getDepartmentService().save(department);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param department
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> DepartmentsItemJsonController.delete(@ModelAttribute Department department) {
        getDepartmentService().delete(department);
        return ResponseEntity.ok().build();
    }
    
}
