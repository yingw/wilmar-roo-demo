// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.wilmar.roo.service.impl;

import cn.wilmar.roo.domain.Department;
import cn.wilmar.roo.domain.Employee;
import cn.wilmar.roo.repository.DepartmentRepository;
import cn.wilmar.roo.service.impl.DepartmentServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DepartmentServiceImpl_Roo_Service_Impl {
    
    declare @type: DepartmentServiceImpl: @Service;
    
    declare @type: DepartmentServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DepartmentRepository DepartmentServiceImpl.departmentRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param departmentRepository
     */
    @Autowired
    public DepartmentServiceImpl.new(DepartmentRepository departmentRepository) {
        setDepartmentRepository(departmentRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DepartmentRepository
     */
    public DepartmentRepository DepartmentServiceImpl.getDepartmentRepository() {
        return departmentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param departmentRepository
     */
    public void DepartmentServiceImpl.setDepartmentRepository(DepartmentRepository departmentRepository) {
        this.departmentRepository = departmentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param department
     */
    @Transactional
    public void DepartmentServiceImpl.delete(Department department) {
        getDepartmentRepository().delete(department);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Department> DepartmentServiceImpl.save(Iterable<Department> entities) {
        return getDepartmentRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void DepartmentServiceImpl.delete(Iterable<Long> ids) {
        List<Department> toDelete = getDepartmentRepository().findAll(ids);
        getDepartmentRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Department
     */
    @Transactional
    public Department DepartmentServiceImpl.save(Department entity) {
        return getDepartmentRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Department
     */
    public Department DepartmentServiceImpl.findOne(Long id) {
        return getDepartmentRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Department
     */
    public Department DepartmentServiceImpl.findOneForUpdate(Long id) {
        return getDepartmentRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Department> DepartmentServiceImpl.findAll(Iterable<Long> ids) {
        return getDepartmentRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Department> DepartmentServiceImpl.findAll() {
        return getDepartmentRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long DepartmentServiceImpl.count() {
        return getDepartmentRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Department> DepartmentServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getDepartmentRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employee
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Department> DepartmentServiceImpl.findByEmployee(Employee employee, GlobalSearch globalSearch, Pageable pageable) {
        return getDepartmentRepository().findByEmployee(employee, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employee
     * @return Long
     */
    public long DepartmentServiceImpl.countByEmployee(Employee employee) {
        return getDepartmentRepository().countByEmployee(employee);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Department> DepartmentServiceImpl.getEntityType() {
        return Department.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> DepartmentServiceImpl.getIdType() {
        return Long.class;
    }
    
}
