// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.wilmar.roo.repository;

import cn.wilmar.roo.domain.Employee;
import cn.wilmar.roo.domain.QEmployee;
import cn.wilmar.roo.repository.EmployeeRepositoryCustom;
import cn.wilmar.roo.repository.EmployeeRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EmployeeRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: EmployeeRepositoryImpl implements EmployeeRepositoryCustom;
    
    declare @type: EmployeeRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.USERNAME = "username";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.PASSWORD = "password";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.BIRTHDAY = "birthday";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.ACTIVE = "active";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String EmployeeRepositoryImpl.DEPARTMENT = "department";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Employee> EmployeeRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QEmployee employee = QEmployee.employee;
        
        JPQLQuery<Employee> query = from(employee);
        
        Path<?>[] paths = new Path<?>[] {employee.username,employee.password,employee.birthday,employee.active,employee.department};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(USERNAME, employee.username)
			.map(PASSWORD, employee.password)
			.map(BIRTHDAY, employee.birthday)
			.map(ACTIVE, employee.active)
			.map(DEPARTMENT, employee.department);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, employee);
    }
    
}
