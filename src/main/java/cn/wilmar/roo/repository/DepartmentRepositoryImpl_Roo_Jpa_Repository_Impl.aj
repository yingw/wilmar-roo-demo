// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.wilmar.roo.repository;

import cn.wilmar.roo.domain.Department;
import cn.wilmar.roo.domain.Employee;
import cn.wilmar.roo.domain.QDepartment;
import cn.wilmar.roo.repository.DepartmentRepositoryCustom;
import cn.wilmar.roo.repository.DepartmentRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect DepartmentRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: DepartmentRepositoryImpl implements DepartmentRepositoryCustom;
    
    declare @type: DepartmentRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DepartmentRepositoryImpl.EMPLOYEE = "employee";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DepartmentRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Department> DepartmentRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDepartment department = QDepartment.department;
        
        JPQLQuery<Department> query = from(department);
        
        Path<?>[] paths = new Path<?>[] {department.employee,department.name};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMPLOYEE, department.employee)
			.map(NAME, department.name);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, department);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employee
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Department> DepartmentRepositoryImpl.findByEmployee(Employee employee, GlobalSearch globalSearch, Pageable pageable) {
        
        QDepartment department = QDepartment.department;
        
        JPQLQuery<Department> query = from(department);
        
        Assert.notNull(employee, "employee is required");
        
        query.where(department.employee.eq(employee));
        Path<?>[] paths = new Path<?>[] {department.employee,department.name};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMPLOYEE, department.employee)
			.map(NAME, department.name);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, department);
    }
    
}
